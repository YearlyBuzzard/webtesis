import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import { InformationCircleIcon, PencilIcon, TrashIcon, EyeIcon } from '@heroicons/react/outline';
import { toast } from 'react-toastify';
import { Chip, Card, CardHeader, Typography, Button, CardBody, IconButton, Tooltip, CardFooter } from "@material-tailwind/react";
import ConfirmDeleteModal from '../modal/ConfirmDeleteModal';
import AddPatientModal from '../modal/AddPatientModal';
import { FiPlus } from 'react-icons/fi';

const TABLE_HEAD = ["Member", "Age", "Gender", "Status", "Condition", "Details", "Actions"];
const TABS = [
  {
    label: "All",
    value: "all",
  },
  {
    label: "Monitored",
    value: "monitored",
  },
  {
    label: "Unmonitored",
    value: "unmonitored",
  },
];

const getStatusIcon = (status) => {
  switch (status) {
    case 'Stable':
      return { value: "Stable", color: "green" };
    case 'Serious':
      return { value: "Serious", color: "yellow" };
    case 'Critical':
      return { value: "Critical", color: "red" };
    default:
      return { value: "Unknown", color: "gray" };
  }
};

const PatientList = () => {
  const [patients, setPatients] = useState([]);
  const [disabledPatients, setDisabledPatients] = useState([]);
  const [enabledPatients, setEnabledPatients] = useState([]);
  const [patientToDelete, setPatientToDelete] = useState(null);
  const [patientToDisable, setPatientToDisable] = useState(null);
  const [openDeleteModal, setOpenDeleteModal] = useState(false);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [activeTab, setActiveTab] = useState(TABS[0].value);

  const fetchPatients = async () => {
    try {
      const response = await fetch('http://localhost:3001/api/patients');
      const data = await response.json();
      setPatients(data);
    } catch (error) {
      console.error('Error fetching patients:', error);
    }
  };

  useEffect(() => {
    fetchPatients();
    fetchEnabledPatients();
    fetchDisabledPatients();
  }, []);

  const handleOpenDeleteModal = (patientId) => {
    setPatientToDelete(patientId);
    setOpenDeleteModal(true);
  };

  const deletePatient = async () => {
    if (patientToDelete) {
      try {
        const response = await fetch(`http://localhost:3001/api/patients/${patientToDelete}`, {
          method: 'DELETE',
        });
        if (response.ok) {
          setPatients(patients.filter((patient) => patient.id !== patientToDelete));
          toast.success('Paciente eliminado correctamente', {
            position: toast.POSITION.TOP_RIGHT,
          });
        } else {
          toast.error('Error al eliminar paciente', {
            position: toast.POSITION.TOP_RIGHT,
          });
        }
      } catch (error) {
        console.error('Error deleting patient:', error);
        toast.error('Error al eliminar paciente', {
          position: toast.POSITION.TOP_RIGHT,
        });
      }
      setOpenDeleteModal(false);
      setPatientToDelete(null);
    }
  };

  const disablePatient = async (patientId) => {
    try {
      const response = await fetch(`http://localhost:3001/api/patients/${patientId}/disable`, {
        method: 'PATCH',
      });
      if (response.ok) {
        toast.success('Paciente deshabilitado correctamente', {
          position: toast.POSITION.TOP_RIGHT,
        });
      } else {
        toast.error('Error al deshabilitar paciente', {
          position: toast.POSITION.TOP_RIGHT,
        });
      }
    } catch (error) {
      console.error('Error disabling patient:', error);
      toast.error('Error al deshabilitar paciente', {
        position: toast.POSITION.TOP_RIGHT,
      });
    }
  };

  const fetchEnabledPatients = async () => {
    try {
      const response = await fetch('http://localhost:3001/api/patients?enabled=true');
      const data = await response.json();
      setEnabledPatients(data);
    } catch (error) {
      console.error('Error fetching enabled patients:', error);
    }
  };

  const fetchDisabledPatients = async () => {
    try {
      const response = await fetch('http://localhost:3001/api/patients?enabled=false');
      const data = await response.json();
      setDisabledPatients(data);
    } catch (error) {
      console.error('Error fetching disabled patients:', error);
    }
  };

  const handleOpenModal = () => {
    setIsModalOpen(true);
  };

  const closeModal = () => {
    setIsModalOpen(false);
  };

  const openModal = () => {
    setIsModalOpen(true);
  };

  const closeModalDelete = () => {
    setOpenDeleteModal(false);
  };

  const handlePatientAdd = (newPatient) => {
    setPatients([...patients, newPatient]);
  };

  const renderPatientRow = (patient) => (
    <tr key={patient.id}>
      <td className="px-6 py-4 whitespace-nowrap">
        <div className="flex items-center">
          <div className="ml-4">
            <div className="text-sm font-medium text-gray-900">{patient.name}</div>
          </div>
        </div>
      </td>
      <td className="px-6 py-4 whitespace-nowrap">
        <div className="text-sm text-gray-900">{patient.age}</div>
      </td>
      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{patient.gender}</td>
      <td className="px-6 py-4 whitespace-nowrap">
        <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-${getStatusIcon(patient.status).color}-100 text-${getStatusIcon(patient.status).color}-800`}>
          {getStatusIcon(patient.status).value}
        </span>
      </td>
      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{patient.condition}</td>
      <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
        <Link to={`/patients/${patient.id}`} className="text-indigo-600 hover:text-indigo-900">
          <InformationCircleIcon className="h-5 w-5" aria-hidden="true" />
        </Link>
      </td>
      <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
        <IconButton size="xs" color="blue" buttonType="link" ripple="dark" onClick={() => handleOpenModal(patient.id)}>
          <PencilIcon />
        </IconButton>
        <IconButton size="xs" color="blue" buttonType="link" ripple="dark" onClick={() => handleOpenDeleteModal(patient.id)}>
          <TrashIcon />
        </IconButton>
        <IconButton size="xs" color="blue" buttonType="link" ripple="dark" onClick={() => disablePatient(patient.id)}>
          <EyeIcon />
        </IconButton>
      </td>
    </tr>
  );

  const filteredPatients = patients.filter((patient) => {
    if (activeTab === 'all') {
      return true;
    } else if (activeTab === 'monitored' && patient.monitored) {
      return true;
    } else if (activeTab === 'unmonitored' && !patient.monitored) {
      return true;
    } else {
      return false;
    }
  });

  return (
    <div>
      <AddPatientModal isModalOpen={isModalOpen} closeModal={closeModal} handlePatientAdd={handlePatientAdd} />
      <ConfirmDeleteModal open={openDeleteModal} closeModal={closeModalDelete} deletePatient={deletePatient} />
      <div className="flex justify-between">
        <Card>
          <CardHeader color="purple" contentPosition="none">
            <div className="w-full flex items-center justify-between">
              <h6 className="text-white text-2xl">Patients</h6>
              <Button
                color="transparent"
                buttonType="outline"
                size="lg"
                ripple="dark"
                onClick={handleOpenModal}
              >
                <FiPlus size={25} />
              </Button>
            </div>
          </CardHeader>
          <CardBody>
            <div className="flex flex-col">
              <div className="-my-2 overflow-x-auto sm:-mx-6 lg:-mx-8">
                <div className="py-2 align-middle inline-block min-w-full sm:px-6 lg:px-8">
                  <div className="shadow overflow-hidden border-b border-gray-200 sm:rounded-lg">
                    <table className="min-w-full divide-y divide-gray-200">
                      <thead className="bg-gray-50">
                        <tr>
                          {TABLE_HEAD.map((headCell) => (
                            <th
                              key={headCell}
                              className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                            >
                              {headCell}
                            </th>
                          ))}
                        </tr>
                      </thead>
                      <tbody className="bg-white divide-y divide-gray-200">
                        {filteredPatients.map(renderPatientRow)}
                      </tbody>
                    </table>
                  </div>
                </div>
              </div>
            </div>
          </CardBody>
          <CardFooter color="lightBlue">
            <div className="flex items-center">
              <Typography color="gray">Showing {filteredPatients.length} patients</Typography>
              <Button color="purple" size="lg" ripple="dark" className="ml-auto">
                Previous
              </Button>
              <Button color="purple" size="lg" ripple="light">
                Next
              </Button>
            </div>
          </CardFooter>
        </Card>
      </div>
    </div>
  );
};

export default PatientList;
